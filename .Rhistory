getwd()
library(pROC)
library(dplyr)
library(corrplot)
data <- read.csv("winequality-white.csv", header = TRUE, sep = ";")
str(data)
#
data <- data[!duplicated(data), ]
#
f<-function(data){any(is.na(data))}
apply(data, 2, f)
#Rename.
data <- rename(data, f.acidity = fixed.acidity, c.acid = citric.acid, r.sugar = residual.sugar, f.s.dioxide = free.sulfur.dioxide, t.s.dioxide = total.sulfur.dioxide, v.acidity = volatile.acidity)
#
# Vẽ boxplot cho từng cột (biến) trong wine_data
par(mfrow=c(3, 4))  # Chia cửa sổ vẽ thành 3 hàng, 4 cột (vì có 12 biến)
for (i in 1:ncol(data)) {
boxplot(data[,i], main=names(data)[i])
}
#
outliers <- function(x, t){
# 1st and 3rd quantiles
q75 = quantile(x, 0.75)
q25 = quantile(x, 0.25)
IQR = q75-q25
# lower bound
lower_bound = q25 - t * IQR
# upper bound
upper_bound = q75 + t * IQR
# outliers
outlier_ind <- which(x < lower_bound | x > upper_bound)
if (length(outlier_ind) == 0){
return (0)
}
return(outlier_ind)
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
s_outlier_indices <- lapply(data[, -12], outliers, t = 3)
# In ra danh sách các chỉ số của giá trị cực ngoại lai cho từng biến
for (i in 1:length(s_outlier_indices)) {
cat("Biến", names(data)[i], "có", length(s_outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(s_outlier_indices[[i]])
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
outlier_indices <- lapply(data[, -12], outliers, t = 1.5)
# In ra danh sách các chỉ số của giá trị ngoại lai cho từng biến
for (i in 1:length(outlier_indices)) {
cat("Biến", names(data)[i], "có", length(outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(outlier_indices[[i]])
}
table(data$quality)
#
par(mfrow=c(3, 4))  # Chia cửa sổ đồ thị thành 3 hàng và 4 cột
for (i in 1:ncol(data)) {
hist(data[, i], main = names(data)[i], xlab = "", ylab = "")
}
summary(data)
#
data$classify[data$quality > 5] <- 1
data$classify[data$quality <= 5] <- 0
table(data$classify)
data <- data[-12]
#
corrplot(cor(data), type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
data <- data[-8]
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
model <- glm(classify ~ ., family = binomial(link = "logit"), data = data)
summary(model)
#
anova(model, test = "Chisq")
#
search = step(model)
#
coef(search)
#
confint(search, level = 0.95)
#
summary(search)
#
anova(search, test = "Chisq")
#
#install.packages("pROC")
#
prob_pred_dt <- predict(search, type = "response")
out_roc <- roc(response = data$classify, predictor = prob_pred_dt)
plot(out_roc, legacy.axes = TRUE, asp = 0)
out_roc$auc
ci.auc(out_roc, conf.level = 0.95)
#
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
#
out_clost <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "closest.topleft")
print(out_clost)
#
log(out_youd$threshold/(1 - out_youd$threshold))
#
log(out_clost$threshold/(1 - out_clost$threshold))
library(pROC)
library(dplyr)
library(corrplot)
data <- read.csv("winequality-white.csv", header = TRUE, sep = ";")
str(data)
#
data <- data[!duplicated(data), ]
#
f<-function(data){any(is.na(data))}
apply(data, 2, f)
#Rename.
data <- rename(data, f.acidity = fixed.acidity, c.acid = citric.acid, r.sugar = residual.sugar, f.s.dioxide = free.sulfur.dioxide, t.s.dioxide = total.sulfur.dioxide, v.acidity = volatile.acidity)
#
# Vẽ boxplot cho từng cột (biến) trong wine_data
par(mfrow=c(3, 4))  # Chia cửa sổ vẽ thành 3 hàng, 4 cột (vì có 12 biến)
for (i in 1:ncol(data)) {
boxplot(data[,i], main=names(data)[i])
}
#
outliers <- function(x, t){
# 1st and 3rd quantiles
q75 = quantile(x, 0.75)
q25 = quantile(x, 0.25)
IQR = q75-q25
# lower bound
lower_bound = q25 - t * IQR
# upper bound
upper_bound = q75 + t * IQR
# outliers
outlier_ind <- which(x < lower_bound | x > upper_bound)
if (length(outlier_ind) == 0){
return (0)
}
return(outlier_ind)
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
s_outlier_indices <- lapply(data[, -12], outliers, t = 3)
# In ra danh sách các chỉ số của giá trị cực ngoại lai cho từng biến
for (i in 1:length(s_outlier_indices)) {
cat("Biến", names(data)[i], "có", length(s_outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(s_outlier_indices[[i]])
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
outlier_indices <- lapply(data[, -12], outliers, t = 1.5)
# In ra danh sách các chỉ số của giá trị ngoại lai cho từng biến
for (i in 1:length(outlier_indices)) {
cat("Biến", names(data)[i], "có", length(outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(outlier_indices[[i]])
}
table(data$quality)
#
par(mfrow=c(3, 4))  # Chia cửa sổ đồ thị thành 3 hàng và 4 cột
for (i in 1:ncol(data)) {
hist(data[, i], main = names(data)[i], xlab = "", ylab = "")
}
summary(data)
#
data$classify[data$quality > 5] <- 1
data$classify[data$quality <= 5] <- 0
table(data$classify)
data <- data[-12]
#
corrplot(cor(data), type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
data <- data[-8]
#
library(pROC)
library(dplyr)
library(corrplot)
data <- read.csv("winequality-white.csv", header = TRUE, sep = ";")
str(data)
#
data <- data[!duplicated(data), ]
#
f<-function(data){any(is.na(data))}
apply(data, 2, f)
#Rename.
data <- rename(data, f.acidity = fixed.acidity, c.acid = citric.acid, r.sugar = residual.sugar, f.s.dioxide = free.sulfur.dioxide, t.s.dioxide = total.sulfur.dioxide, v.acidity = volatile.acidity)
#
# Vẽ boxplot cho từng cột (biến) trong wine_data
par(mfrow=c(3, 4))  # Chia cửa sổ vẽ thành 3 hàng, 4 cột (vì có 12 biến)
for (i in 1:ncol(data)) {
boxplot(data[,i], main=names(data)[i])
}
#
outliers <- function(x, t){
# 1st and 3rd quantiles
q75 = quantile(x, 0.75)
q25 = quantile(x, 0.25)
IQR = q75-q25
# lower bound
lower_bound = q25 - t * IQR
# upper bound
upper_bound = q75 + t * IQR
# outliers
outlier_ind <- which(x < lower_bound | x > upper_bound)
if (length(outlier_ind) == 0){
return (0)
}
return(outlier_ind)
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
s_outlier_indices <- lapply(data[, -12], outliers, t = 3)
# In ra danh sách các chỉ số của giá trị cực ngoại lai cho từng biến
for (i in 1:length(s_outlier_indices)) {
cat("Biến", names(data)[i], "có", length(s_outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(s_outlier_indices[[i]])
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
outlier_indices <- lapply(data[, -12], outliers, t = 1.5)
# In ra danh sách các chỉ số của giá trị ngoại lai cho từng biến
for (i in 1:length(outlier_indices)) {
cat("Biến", names(data)[i], "có", length(outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(outlier_indices[[i]])
}
table(data$quality)
#
par(mfrow=c(3, 4))  # Chia cửa sổ đồ thị thành 3 hàng và 4 cột
for (i in 1:ncol(data)) {
hist(data[, i], main = names(data)[i], xlab = "", ylab = "")
}
summary(data)
#
data$classify[data$quality > 5] <- 1
data$classify[data$quality <= 5] <- 0
table(data$classify)
data <- data[-12]
#
corrplot(cor(data), type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
data <- data[-8]
#
model <- glm(classify ~ ., family = binomial(link = "logit"), data = data)
summary(model)
#
anova(model, test = "Chisq")
#
anova(model, test = "Chisq")
#
search = step(model)
#
coef(search)
#
confint(search, level = 0.95)
#
summary(search)
#
anova(search, test = "Chisq")
#
#install.packages("pROC")
#
prob_pred_dt <- predict(search, type = "response")
out_roc <- roc(response = data$classify, predictor = prob_pred_dt)
plot(out_roc, legacy.axes = TRUE, asp = 0)
out_roc$auc
ci.auc(out_roc, conf.level = 0.95)
#
#install.packages("pROC")
#
prob_pred_dt <- predict(search, type = "response")
out_roc <- roc(response = data$classify, predictor = prob_pred_dt)
plot(out_roc, legacy.axes = TRUE, asp = 0)
out_roc$auc
ci.auc(out_roc, conf.level = 0.95)
#
out_roc$auc
ci.auc(out_roc, conf.level = 0.95)
#
#install.packages("pROC")
#
prob_pred_dt <- predict(search, type = "response")
out_roc <- roc(response = data$classify, predictor = prob_pred_dt)
plot(out_roc, legacy.axes = TRUE, asp = 0)
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
#
out_clost <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "closest.topleft")
print(out_clost)
#
log(out_youd$threshold/(1 - out_youd$threshold))
#
log(out_clost$threshold/(1 - out_clost$threshold))
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
log(out_youd$threshold/(1 - out_youd$threshold))
#
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
print(log(out_youd$threshold/(1 - out_youd$threshold)))
#
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
#
print(log(out_youd$threshold/(1 - out_youd$threshold)))
out_clost <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "closest.topleft")
print(out_clost)
#
out_clost <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "closest.topleft")
print(out_clost)
#
log(out_clost$threshold/(1 - out_clost$threshold))
log(out_clost$threshold/(1 - out_clost$threshold))
log(out_clost$threshold/(1 - out_clost$threshold))
print(log(out_youd$threshold/(1 - out_youd$threshold)))
log(0.6699935/(1- 0.6699935))
log(out_clost$threshold/(1 - out_clost$threshold))
log(0.6439254/(1- 0.6439254))
library(pROC)
library(dplyr)
library(corrplot)
data <- read.csv("winequality-white.csv", header = TRUE, sep = ";")
str(data)
#
data <- data[!duplicated(data), ]
#
f<-function(data){any(is.na(data))}
apply(data, 2, f)
#Rename.
data <- rename(data, f.acidity = fixed.acidity, c.acid = citric.acid, r.sugar = residual.sugar, f.s.dioxide = free.sulfur.dioxide, t.s.dioxide = total.sulfur.dioxide, v.acidity = volatile.acidity)
#
# Vẽ boxplot cho từng cột (biến) trong wine_data
par(mfrow=c(3, 4))  # Chia cửa sổ vẽ thành 3 hàng, 4 cột (vì có 12 biến)
for (i in 1:ncol(data)) {
boxplot(data[,i], main=names(data)[i])
}
#
outliers <- function(x, t){
# 1st and 3rd quantiles
q75 = quantile(x, 0.75)
q25 = quantile(x, 0.25)
IQR = q75-q25
# lower bound
lower_bound = q25 - t * IQR
# upper bound
upper_bound = q75 + t * IQR
# outliers
outlier_ind <- which(x < lower_bound | x > upper_bound)
if (length(outlier_ind) == 0){
return (0)
}
return(outlier_ind)
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
s_outlier_indices <- lapply(data[, -12], outliers, t = 3)
# In ra danh sách các chỉ số của giá trị cực ngoại lai cho từng biến
for (i in 1:length(s_outlier_indices)) {
cat("Biến", names(data)[i], "có", length(s_outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(s_outlier_indices[[i]])
}
# Sử dụng hàm lapply để áp dụng hàm outliers cho từng cột
outlier_indices <- lapply(data[, -12], outliers, t = 1.5)
# In ra danh sách các chỉ số của giá trị ngoại lai cho từng biến
for (i in 1:length(outlier_indices)) {
cat("Biến", names(data)[i], "có", length(outlier_indices[[i]]), "giá trị cực ngoại lai:\n")
print(outlier_indices[[i]])
}
table(data$quality)
#
par(mfrow=c(3, 4))  # Chia cửa sổ đồ thị thành 3 hàng và 4 cột
for (i in 1:ncol(data)) {
hist(data[, i], main = names(data)[i], xlab = "", ylab = "")
}
summary(data)
#
data$classify[data$quality > 5] <- 1
data$classify[data$quality <= 5] <- 0
table(data$classify)
data <- data[-12]
#
corrplot(cor(data), type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10))
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
data <- data[-8]
#
car::vif(glm(classify ~ ., family = binomial, data = data))
#
model <- glm(classify ~ ., family = binomial(link = "logit"), data = data)
summary(model)
#
anova(model, test = "Chisq")
#
search = step(model)
#
coef(search)
#
confint(search, level = 0.95)
#
summary(search)
#
anova(search, test = "Chisq")
#
#install.packages("pROC")
#
prob_pred_dt <- predict(search, type = "response")
out_roc <- roc(response = data$classify, predictor = prob_pred_dt)
plot(out_roc, legacy.axes = TRUE, asp = 0)
out_roc$auc
ci.auc(out_roc, conf.level = 0.95)
#
out_youd <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "youden")
print(out_youd)
#
print(log(out_youd$threshold/(1 - out_youd$threshold)))
out_clost <- coords(out_roc, "best", ret = c("threshold", "specificity", "sensitivity"),
best.method = "closest.topleft")
print(out_clost)
#
log(out_clost$threshold/(1 - out_clost$threshold))
